[{"model": "blog.blogpostpage", "pk": 4, "fields": {"date": "2024-10-25", "intro": "In today's landscape, it's more common to see JavaScript and TypeScript developers and for anyone looking to get a job as a developer, it would probably make sense to just dive straight into Next JS or React as most jobs you'll see online are looking for people proficient in those. I, however, have opted to stick to what I know best, Django, and built my developer expertise around that. This article is meant to encourage anyone else who might want to do the same.", "hero_image": 1, "body": "<h2 data-block-key=\"83u4a\">Background</h2><p data-block-key=\"am93s\">So a little bit about me. I'm an IT support professional with about 5 years experience in IT support. I've had a little bit of informal experience programming: I have done <i>some</i> \"official\" programming at a job I used to work where I developed some web apps and like most IT people, I've done a few side projects here and there using various technologies.</p><p data-block-key=\"f1t8e\">Recently, I've been working on making a career shift. I want to get into web development as my career and of all the technologies I've worked with, Django seems to be the best fit for me. I love working with it and I feel I can build the most mastery in it.</p><h2 data-block-key=\"akpik\">Why I Stick With Django</h2><p data-block-key=\"n6fu\">So what I said above pretty much covers the bulk of why I use Django: I'm familiar with it and I enjoy working with it. Honestly, I would stick to it for that alone but there are some tangible benefits to working with Django.</p><ul><li data-block-key=\"4svnf\">Its batteries included approach makes it heavily opinionated.<ul><li data-block-key=\"bamm7\">Some might feel this to be a drawback as it locks you in to certain patterns of thinking and problem-solving, but in my opinion, that's one of the best things about Django. Django kind of makes you follow best practices for organizing and developing your web application. It provides a guiding hand, and for anybody completely new to web development, I honestly think Django is the best way to learn about how it all ties together, even if you go on to use other frameworks. For example, out of the box, it provides well-integrated ways of managing middleware, static files, media files, database models and migrations, site-wide context, form validation tools, user permissions, etc. These are all things you'd have to bake into a web application regardless of what framework you're using and Django gives you a guided hand at working with these things.</li><li data-block-key=\"8haev\">I think Django hits a sweet spot where it's opinionated enough to make sure you're doing the right things, but not so opinionated that you can't customize it. Which brings me to my second point.</li></ul></li><li data-block-key=\"87ah6\">It's well-designed and customizable.<ul><li data-block-key=\"74tqq\">While Django does provide idiomatic ways of doing things, it also does a good job at allowing for customization. The admin interface, the fact that you can swap out templating engines, the support for multiple databases and multiple caching backends, file storage backends, etc. Django does a good job of really allowing you to bring your own code to whatever part of the process you want to replace, and it'll fit pretty well with the rest of Django.</li></ul></li><li data-block-key=\"28vrf\">It's mature and stable.<ul><li data-block-key=\"1bpqi\">Now here's another thing that was quite important to my decision to use Django. As much as I like learning about new things, I'll be the first to admit that it's very annoying to use frameworks and tools that change the way they fundamentally do things from time to time or keep adding features to solve problems that purely exist within that framework (I'm looking at you NextJS/React ðŸ‘€).</li><li data-block-key=\"5d12k\">Django doesn't change much. I've got projects from 6 years ago that I upgraded from Django 4 to Django 5 with little fuss. It's got a very robust API and architecture and I've never seen it fall victim to a paradigm shift (like when React went from class-based components and life-cycle methods to function-based components and hooks. Not damning changes, just annoying to keep up with).</li></ul></li><li data-block-key=\"5o0p8\">It's focused.<ul><li data-block-key=\"3k18o\">Django focuses on providing tools to develop web-applications. It places itself firmly in the middle i.e. does not concern itself with infrastructure and it does not particularly concern itself with what front-end tooling you're using.</li></ul></li></ul><h3 data-block-key=\"cv568\">Conclusion</h3><p data-block-key=\"6hb2h\">A common theme among all my reasons for choosing Django is basically that Django has the smallest amount of mental burden on me of all the things I've looked at. I get it. I get why it does things the way it does them and I like the guiding hand.</p>"}}, {"model": "blog.blogpostindexpage", "pk": 3, "fields": {}}]